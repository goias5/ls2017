Atividade Supervisionada Lista 1

1 - git --version
2 a) É o mesmo que --list, ou list all, e lista todas as configurações
  b) Neste caso, ele renomeia o arquivo a.txt para b.txt
  c) Reseta o índice e a árvore de trabalho, e qualquer mudança nos arquivos monitorados na arvore de trabalho desde o <commit>
  (envio) são descartados
  d) Mostra os últimos 27 commit logs
  e) Mostra uma lista de comandos comuns do git usados em várias situações
  f) Mostra a documentação do comando reset
  g) Atualiza o índice não somente onde a árvore de trabalho possui um arquivo que corresponde a <pathspec> mas também onde o 
  índice já tem uma entrada. Isto adiciona, modifica, e remove entradas no índice para se igualar à árvore de trabalho. Como foi
  enviado sem um <pathspec>, somente o comando -all, todos os arquivos em toda a árvore de trabalho são atualizados.
  h) Atualiza o índice, todos os arquivos monitorados em toda a árvore de trabalho são atualizados.
  3 git -add arquivo
    git -commit arquivo
  4 git diff commitAtual commitAnterior
  5 git status
  6 git commit
  7 git reset teste.txt
  8 Deve ser especificado um padrão no arquivo de configuração gitIgnore para que este diretório seja ignorado.
  9 Pode-se recuperar a partir do repositório remoto
  10 deve-se utilizar o comando git clone [enderecoDoRepositorio]
  11 git log --oneline
  12 no arquivo gitconfig
  13 git init [nomeDoRepositorio]
  14 .git
  15 git add .
  16 Significa que o git usa algoritmo de hash SHA1 para gerar um hash referente ao seu commit. O algoritmo de hash SHA1 é um algoritmo
  que pega uma String de bytes de tamanho variável e transforma em uma String hexadecimal de tamanho fixo. Da forma que o algoritmo é,
  a chance de se ter dois hashs iguais e arquivos diferentes é praticamente impossível, devido ao tamanho de possibilidades e a forma de
  funcionamento do algoritmo. Dessa forma, se dois hashs sao idênticos, se garante a autenticidade de determinado arquivo, ou commit, ou
  conjunto de bits de tamanho qualquer. O propósito seria garantir a autenticidade de um commit.
  17 git log --abbrev-commit
  18 Passam de untracked para obviamente tracked, mas new file não sei se é uma nomenclatura para arquivos que agora estão monitorados,
  ou seja tracked.
  19 O primeiro comando não toca o arquivo de índice na árvore de trabalho de jeito nenhum, mas reseta o cabeçalho para <commit>, 
  idêntico a outros modos, e aliado com HEAD~1, reseta o cabeçalho para antes da segunda adição de arquivos.
  O segundo reseta tudo para o ultimo commit, então o estado final é o do último commit.
  20 Já que o diretório não está monitorado, basta deletá-lo, e isto depende de sistema operacional
  21 gitignore
  22 basta nas configurações do git ignore, utilizando a sintaxe dada na documentação, especificar para o git ignorar todos os arquivos
  .class
  23 Ok
  24 Mostra uma lista de nomes e emails, referente aos últimos envios provavelmente e alterações no repositório.
  25 Mostra a configuração da variável "origin" de "fetch" e de "push"
  26 git tag
  27 git tag -1 'v2.0.*'
  28 Cria-se uma tag anotada versão 3.4-gold, e inclui a mensagem "minha versão ouro" junto à tag, armazenados então no banco
  de dados do git como objetos inteiros, junto ao nome e email de quem criou a tag, e a data.
  29 mostra-se o nome da tag 3.4-gold, e logo abaixo o criador da tag, o email do criador da tag, o hash referente ao commit,
  o autor do commit, a data do commit, testes, correções, fechamentos, e outras informações difíceis de se interpretar.
  30 Executa um push, eviando do diretório local para o repositório remoto definido na variável origin, os arquivos do commit
  atual, com o nome de versão 3.4-gold
  31 Temos a resposta na documentação do git, que diz, em relação ao comando git commit --ammend: "Uma das situações mais comuns 
  para desfazer algo, acontece quando você faz o commit muito cedo e possivelmente esqueceu de adicionar alguns arquivos, ou você
  bagunçou sua mensagem de commit. Se você quiser tentar fazer novamente esse commit, você pode executá-lo com a opção --amend"
  32 Ele retira dos arquivos adicionados, todos os arquivos menos o arquivo x.txt
  33 Ele faz uma atualização do arquivo a.txt para que este esteja idêntico ao arquivo a.txt que está no repositório.
  34 O primeiro comando remove todos que estavam adicionados para serem enviados ao servidor e deixa somente o x.txt, enquanto
  o segundo atualiza o arquivo a.txt na máquina para ficar idêntico ao do servidor.

  
